version: '3.7'

networks:
  altia_network:
    driver: bridge
  sonarnet:
    driver: bridge
  elk:
    driver: bridge

services:
  
  consul:
    image: hashicorp/consul:1.10.0
    container_name: consul
    restart: always
    volumes:
      - ./server.json:/consul/config/server.json:ro
    ports:
      - "8500:8500"
      - "8600:8600/tcp"
      - "8600:8600/udp"
    command: "agent"

  redis:
    image: 'bitnami/redis:5.0.14'
    container_name: redis
    ports:
      - "6379:6379"
    environment:
      - ALLOW_EMPTY_PASSWORD=yes

  zipkin:
    image: openzipkin/zipkin
    container_name: zipkin
    ports:
      - 9411:9411

  postgres:
    image: postgres
    container_name: postgres_database
    restart: always
    ports:
      - 5434:5432
    volumes:
      - postgres_data:/var/lib/postgresql/data
    environment:
      POSTGRES_DB: dataexchange
      POSTGRES_USER: dataexchange
      POSTGRES_PASSWORD: dataexchange
    networks:
      - altia_network

  keycloak:
    image: jboss/keycloak:16.1.0
    container_name: keycloak
    environment:
      DB_VENDOR: POSTGRES
      DB_ADDR: postgres
      DB_DATABASE: keycloak-hunters
      DB_USER: keycloak-hunters
      DB_SCHEMA: public
      DB_PASSWORD: hunters3
      KEYCLOAK_USER: admin
      KEYCLOAK_PASSWORD: hunters3
    ports:
      - 8095:8080
    depends_on:
      - postgres
    networks:
      - altia_network

  mongo:
    image: mongo
    container_name: mongo_database
    environment:
      MONGO_INITDB_ROOT_USERNAME: hunters
      MONGO_INITDB_ROOT_PASSWORD: hunters3
    ports:
      - 27017:27017
    volumes:
      - mongodb_data_container:/data/db

  zookeeper:
    image: bitnami/zookeeper:3.5.9
    container_name: zookeeper
    restart: always
    environment:
      ALLOW_ANONYMOUS_LOGIN: "yes"
    ports:
      - 2181:2181

  kafka:
    image: bitnami/kafka:2.8.1
    container_name: kafka
    restart: always
    depends_on:
      - zookeeper
    ports:
      - 29092:29092
      - 9092:9092
    environment:
      ALLOW_PLAINTEXT_LISTENER: "yes"
      KAFKA_CFG_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_CFG_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092
      KAFKA_CFG_LISTENERS: PLAINTEXT://:9092,PLAINTEXT_HOST://:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT    
 
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:$ELK_VERSION
    container_name: elasticsearch
    restart: always
    volumes:
      - ./src/elasticsearch/config/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml:ro,z
      - elasticsearch_data:/usr/share/elasticsearch/data:rw              # Persistence data
    ports:
      - "9200:9200"
      - "9300:9300"
    environment:
      ES_JAVA_OPTS: "-Xmx256m -Xms256m"
      ELASTIC_PASSWORD: changeme
      # Use single node discovery in order to disable production mode and avoid bootstrap checks.
      # see: https://www.elastic.co/guide/en/elasticsearch/reference/current/bootstrap-checks.html
      discovery.type: single-node
    networks:
      - elk

  logstash:
    image: docker.elastic.co/logstash/logstash:$ELK_VERSION
    container_name: logstash
    volumes:
      - ./src/logstash/config/logstash.yml:/usr/share/logstash/config/logstash.yml:ro,z
      - ./src/logstash/pipeline:/usr/share/logstash/pipeline:ro                # Pipeline configuration
    ports:
      - "5044:5044"
      - "5000:5000/tcp"
      - "5000:5000/udp"
      - "9600:9600"
    environment:
      LS_JAVA_OPTS: "-Xmx256m -Xms256m"
    networks:
      - elk
    depends_on:
      - elasticsearch

  kibana:
    image: docker.elastic.co/kibana/kibana:$ELK_VERSION
    container_name: kibana
    restart: always
    volumes:
      - ./src/kibana/config/kibana.yml:/usr/share/kibana/config/kibana.yml:ro,z
    ports:
      - "5601:5601"
    networks:
      - elk
    depends_on:
      - elasticsearch

  sonarqube:
    image: sonarqube
    container_name: sonarqube
    restart: always
    ports:
      - "9000:9000"
    networks:
      - sonarnet
    environment:
      SONAR_JDBC_URL: jdbc:postgresql://sonar_db:5432/sonar
      SONAR_JDBC_USERNAME: sonar
      SONAR_JDBC_PASSWORD: sonar
      SONAR_SEARCH_JAVAADDITIONALOPTS: "-Dnode.store.allow_mmap=false"
    volumes:
      - sonarqube_conf:/opt/sonarqube/conf
      - sonarqube_data:/opt/sonarqube/data
      - sonarqube_extensions:/opt/sonarqube/extensions
      - sonarqube_bundled-plugins:/opt/sonarqube/lib/bundled-plugins
    depends_on:
      - sonar_db
  
  sonar_db:
    image: postgres
    container_name: sonar_db
    restart: always
    ports:
      - 5435:5432
    networks:
      - sonarnet
    environment:
      - POSTGRES_DB=sonar
      - POSTGRES_USER=sonar
      - POSTGRES_PASSWORD=sonar
    volumes:
      - postgresql:/var/lib/postgresql
      - postgresql_data:/var/lib/postgresql/data

  # https://www.cloudbees.com/blog/how-to-install-and-run-jenkins-with-docker-compose
  jenkins:
    image: jenkins/jenkins:lts
    container_name: jenkins
    restart: always
    privileged: true
    user: root
    ports:
      - 8080:8080
      - 50000:50000
    volumes:
      - jenkins_data:/var/jenkins_home
      - /var/run/docker.sock:/var/run/docker.sock

volumes:
  jenkins_data:
  sonarqube_conf:
  sonarqube_data:
  sonarqube_extensions:
  sonarqube_bundled-plugins:
  mongodb_data_container:
  postgresql:
  postgresql_data:
  postgres_data:
    driver: local
  elasticsearch_data:
    driver: local